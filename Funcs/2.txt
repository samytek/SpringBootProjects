<!-- Button to open the modal -->
<button (click)="openModal()" class="open-modal-button">Open Modal</button>

<!-- Modal -->
<div *ngIf="isModalOpen" class="modal-overlay">
    <div class="modal">
        <div class="modal-header">
            <h2>Modal Title</h2>
            <button class="close-button" (click)="closeModal()">Ã—</button>
        </div>
        <div class="modal-body">
            <div class="form-container">
                <!-- Left Side -->
                <div class="form-column">
                    <label for="left-text1">Text Field 1</label>
                    <input type="text" id="left-text1"  />

                    <label for="left-text2">Text Field 2</label>
                    <input type="text" id="left-text2"  />

                    <label for="left-dropdown">Dropdown</label>
                    <select id="left-dropdown" >
                        <option value="Option 1">Option 1</option>
                        <option value="Option 2">Option 2</option>
                    </select>
                </div>

                <!-- Right Side -->
                <div class="form-column">
                    <label for="right-text1">Text Field 3</label>
                    <input type="text" id="right-text1" />

                    <label for="right-text2">Text Field 4</label>
                    <input type="text" id="right-text2" />

                    <label for="right-dropdown">Dropdown</label>
                    <select id="right-dropdown">
                        <option value="Option 1">Option 1</option>
                        <option value="Option 2">Option 2</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="reset-button" (click)="resetForm()">Reset</button>
            <button class="submit-button" (click)="submitForm()">Submit</button>
        </div>
    </div>
</div>	



/* Modal Overlay */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.75); /* Slightly darker background for contrast */
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  animation: fadeIn 0.3s ease-in-out;
}

/* Modal */
.modal {
  background: #fefefe;
  width: 60%; /* Slightly larger for better usability */
  border-radius: 12px;
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */
  display: flex;
  flex-direction: column;
  overflow: hidden; /* To ensure no content spills out */
  animation: slideIn 0.3s ease-in-out;
}

/* Modal Header */
.modal-header {
  background: #007bff; /* Attractive blue header */
  color: white;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-header h2 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: bold;
}

.close-button {
  background: none;
  border: none;
  font-size: 1.5rem;
  color: white;
  cursor: pointer;
  transition: transform 0.2s ease-in-out;
}

.close-button:hover {
  transform: scale(1.2);
}

/* Modal Body */
.modal-body {
  padding: 1.5rem;
  background: #f9f9f9; /* Subtle contrast for the body */
}

.form-container {
  display: flex;
  justify-content: space-between;
  gap: 1rem;
}

.form-column {
  width: 48%; /* Balanced columns */
}

label {
  display: block;
  margin-bottom: 0.5rem;
  // font-weight: bold;
  color: #333;
}

input,
select {
  width: 100%;
  padding: 0.75rem;
  margin-bottom: 1rem;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 1rem;
  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

input:focus,
select:focus {
  border-color: #007bff;
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
  outline: none;
}

/* Modal Footer */
.modal-footer {
  display: flex;
  justify-content: flex-end;
  padding: 1rem;
  background: #f1f1f1;
  border-top: 1px solid #ddd;
}

.reset-button,
.submit-button {
  padding: 0.75rem 2rem;
  margin-left: 1rem;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease-in-out, transform 0.2s ease-in-out;
}

.reset-button {
  background: #f5f5f5;
  color: #555;
}

.reset-button:hover {
  background: #e0e0e0;
  transform: translateY(-2px);
}

.submit-button {
  background: #007bff;
  color: white;
}

.submit-button:hover {
  background: #0056b3;
  transform: translateY(-2px);
}

/* Open Modal Button */
.open-modal-button {
  padding: 0.75rem 1.5rem;
  background: #007bff;
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease-in-out, transform 0.2s ease-in-out;
}

.open-modal-button:hover {
  background: #0056b3;
  transform: translateY(-2px);
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    transform: translateY(-50px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}



  isModalOpen = false;

  leftText1 = '';
  leftText2 = '';
  leftDropdown = '';

  rightText1 = '';
  rightText2 = '';
  rightDropdown = '';

  openModal() {
    this.isModalOpen = true;
  }

  closeModal() {
    this.isModalOpen = false;
  }

  resetForm() {
    this.leftText1 = '';
    this.leftText2 = '';
    this.leftDropdown = '';

    this.rightText1 = '';
    this.rightText2 = '';
    this.rightDropdown = '';
  }

  submitForm() {
    const formData = {
      leftText1: this.leftText1,
      leftText2: this.leftText2,
      leftDropdown: this.leftDropdown,
      rightText1: this.rightText1,
      rightText2: this.rightText2,
      rightDropdown: this.rightDropdown,
    };
    console.log('Submitted Data:', formData);
    this.closeModal();
  }
  
import { Component } from '@angular/core';
import { TempSideService } from './temp-side.service'; // Adjust the path as per your project structure

@Component({
  selector: 'app-temp-side',
  templateUrl: './temp-side.component.html',
  styleUrls: ['./temp-side.component.css']
})
export class TempSideComponent {
  selectedOption: string | null = null;
  startDate: string | null = null;
  endDate: string | null = null;

  // Sample dropdown options
  dropdownOptions = [
    { id: '1', name: 'Option 1' },
    { id: '2', name: 'Option 2' },
    { id: '3', name: 'Option 3' }
  ];

  constructor(private tempSideService: TempSideService) {}

  isSubmitDisabled(): boolean {
    return !(this.selectedOption && this.startDate && this.endDate);
  }

  onSubmit() {
    const requestData = {
      userId: 123, // This can be dynamically set as required
      currentSideId: parseInt(this.selectedOption!, 10),
      tempSiteId: 789, // Replace with actual logic if dynamic
      startDate: this.startDate,
      endDate: this.endDate
    };

    this.tempSideService.testTempSide(requestData).subscribe(
      (response) => {
        console.log('Response from API:', response);
        alert('Data submitted successfully!');
      },
      (error) => {
        console.error('Error from API:', error);
        alert('Failed to submit data. Please try again.');
      }
    );
  }
}


  
  import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class TempSideService {

  private apiUrl = 'http://your-backend-api.com/testTempSide'; // Replace with your API endpoint

  constructor(private http: HttpClient) {}

  testTempSide(data: { userId: number; currentSideId: number; tempSiteId: number; startDate: string; endDate: string }): Observable<any> {
    return this.http.post<any>(this.apiUrl, data);
  }
}

<div>
  <label for="dropdown">Select Option:</label>
  <select id="dropdown" [(ngModel)]="selectedOption">
    <option value="" disabled selected>Select an option</option>
    <option *ngFor="let option of dropdownOptions" [value]="option.id">{{ option.name }}</option>
  </select>
</div>

<div>
  <label for="startDate">Start Date:</label>
  <input id="startDate" type="date" [(ngModel)]="startDate" />
</div>

<div>
  <label for="endDate">End Date:</label>
  <input id="endDate" type="date" [(ngModel)]="endDate" />
</div>

<div>
  <button [disabled]="isSubmitDisabled()" (click)="onSubmit()">Submit</button>
</div>
